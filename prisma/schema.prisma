generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Traffic {
  id                           Int     @id @default(autoincrement())
  vk_user_id                   Int?
  vk_app_id                    Int?
  vk_chat_id                   Int?
  vk_is_app_user               Int?
  vk_are_notifications_enabled Int?
  vk_language                  String?
  vk_ref                       String?
  vk_access_token_settings     String?
  vk_group_id                  Int?
  vk_viewer_group_role         String?
  vk_platform                  String?
  vk_is_favorite               Int?
  vk_ts                        Int?
  vk_is_recommended            Int?
  vk_profile_id                Int?
  vk_has_profile_button        Int?
  vk_testing_group_id          Int?
  sign                         String?
  odr_enabled                  Int?
  user                         User?   @relation(fields: [vk_user_id], references: [id])
}

model Role {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  ProjectMember ProjectMember[]
}

model User {
  id          Int             @id
  status      ProfileStatus   @default(default)
  projects    Project[]       @relation("ProjectOwner")
  memberships ProjectMember[]
  assignee    Task[]          @relation("Assignee")
  viewer      TaskViewer[]
  comments    TaskComment[]
  tokens      Token[]
  traffic     Traffic[]
}

model Token {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique
  type       TokenType @default(access)
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  expire_at  DateTime
  user       User      @relation(fields: [user_id], references: [id])
}

enum TokenType {
  access
  refresh
}

model Project {
  id         Int             @id @default(autoincrement())
  name       String          @unique
  short_name String          @unique
  owner_id   Int
  owner      User            @relation("ProjectOwner", fields: [owner_id], references: [id])
  members    ProjectMember[]
  labels     TaskLabel[]
}

model ProjectMember {
  project_id Int
  user_id    Int
  role_id    Int
  project    Project @relation(fields: [project_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])
  role       Role    @relation(fields: [role_id], references: [id])

  @@id([project_id, user_id])
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  assignee_id Int
  viewers     TaskViewer[]
  status      TaskStatus
  comments    TaskComment[]
  assignee    User          @relation("Assignee", fields: [assignee_id], references: [id])
}

model TaskViewer {
  task_id Int
  user_id Int
  task    Task @relation(fields: [task_id], references: [id])
  user    User @relation(fields: [user_id], references: [id])

  @@id([task_id, user_id])
}

model TaskComment {
  id       Int    @id @default(autoincrement())
  task_id  Int
  owner_id Int
  message  String
  task     Task   @relation(fields: [task_id], references: [id])
  user     User   @relation(fields: [owner_id], references: [id])
}

model TaskLabel {
  id         Int     @id @default(autoincrement())
  name       String
  project_id Int
  project    Project @relation(fields: [project_id], references: [id])

  @@unique([name, project_id])
}

enum ProfileStatus {
  default
  deleted
  banned
}

enum TaskStatus {
  unresolved
  in_progress
  declined
  cancel
}
